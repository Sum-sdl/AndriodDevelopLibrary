apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
//依赖倒置
apply plugin: 'com.zhoupu.api'

//应用protobuf插件
apply plugin: 'com.google.protobuf'

android {
    signingConfigs {
        config {
            keyAlias 'sum'
            keyPassword '123456'
            storeFile file('../sample/debug_keystore.jks')
            storePassword '123456'
        }
    }

    kotlin {
        experimental {
            coroutines 'enable'
        }
    }

    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {

        applicationId rootProject.ext.app.applicationId
        minSdkVersion rootProject.ext.app.minSdkVersion
        targetSdkVersion rootProject.ext.app.targetSdkVersion
        versionCode rootProject.ext.app.versionCode
        versionName rootProject.ext.app.versionName

        multiDexEnabled true
        //默认渠道 LEAN_CLOUD_CHANNEL:manifest 中的key
        manifestPlaceholders = [LEAN_CLOUD_CHANNEL: "huawei"]
        //添加自定义BuildConfig属性,可用来避免手动配置代码（如不同的环境域名）
        buildConfigField("boolean", "LOG_SHOW", "true")
        buildConfigField("String", "API_HOST", "\"https\"")
        // 用于动态添加新的资源文件里面值
        resValue("string", "app_add_res", "AAA")

        /*ndk {
            //选择要添加的对应cpu类型的.so库。
            abiFilters 'armeabi', 'armeabi-v7a', 'x86'
            // 还可以添加 'armeabi-v8a', 'x86_64', 'mips', 'mips64'
        }*/

        signingConfig signingConfigs.config
    }
    buildTypes {
        debug {
            minifyEnabled false//混淆
            buildConfigField("String", "API_HOST", "\"https+++重写构建值\"")
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }
//    //ui处理
//    viewBinding {
//        enabled = true
//    }

    repositories {
        mavenCentral()
        flatDir {
            dirs 'libs'
        }
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/main.kotlin_module'
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main{
            proto{
                srcDir "src/main/proto"
            }
        }
    }
    /* //修改生成的apk名字
      android.applicationVariants.all { variant ->
        variant.outputs.all {
//            outputFileName = "${variant.name}-${variant.versionName}.apk"
            outputFileName = "com.rent.azn_v${variant.versionName}_${variant.buildType.name}.apk"
        }
    }*/
}

configurations {
    //编译期排除utilcode框架
//    compile.exclude module: 'utilcode'
    //在整个构建过程中排除框架
//    all*.exclude group: 'com.blankj', module: 'utilcode'
}

configurations.all {
    resolutionStrategy {
        //force冲突时，强制相同的库使用统一的版本
//        force "com.android.support:appcompat-v7:28.0.0"
        //utilCode 最后编译的版本,(lib中用的是1.14.2版本)
//        force 'com.blankj:utilcode:1.13.11'
    }
}

dependencies {
//    compile fileTree(dir: 'libs', include: ['*.jar','*.aar'])
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    //compileOnly 不打包，只是依赖
//    compileOnly 'com.android.support.constraint:constraint-layout:1.1.3'
//
//    api "com.android.support:appcompat-v7:${rootProject.ext.dependencies.supportLibraryVersion}"
//    api "com.android.support:support-v4:${rootProject.ext.dependencies.supportLibraryVersion}"
//    api "com.android.support:recyclerview-v7:${rootProject.ext.dependencies.supportLibraryVersion}"
//    api "com.android.support:cardview-v7:${rootProject.ext.dependencies.supportLibraryVersion}"
//    api "com.android.support:design:${rootProject.ext.dependencies.supportLibraryVersion}"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    //impl
    implementation 'com.github.Sum-sdl:RvAdapter:3.0.1'

    //刷新组件
//    api 'com.scwang.smart:refresh-layout-kernel:2.0.1'
//    api 'com.scwang.smart:refresh-header-material:2.0.1'
//    api 'com.scwang.smart:refresh-footer-ball:2.0.1'
    implementation  'com.scwang.smart:refresh-layout-kernel:2.0.1'      //核心必须依赖
    implementation  'com.scwang.smart:refresh-header-classics:2.0.1'    //经典刷新头
    implementation  'com.scwang.smart:refresh-header-radar:2.0.1'       //雷达刷新头
    implementation  'com.scwang.smart:refresh-header-falsify:2.0.1'     //虚拟刷新头
    implementation  'com.scwang.smart:refresh-header-material:2.0.1'    //谷歌刷新头
    implementation  'com.scwang.smart:refresh-header-two-level:2.0.1'   //二级刷新头
    implementation  'com.scwang.smart:refresh-footer-ball:2.0.1'        //球脉冲加载
    implementation  'com.scwang.smart:refresh-footer-classics:2.0.1'    //经典加载

    //viewmodels
    //    api 'com.google.android.material:material:1.1.0-alpha10'
//    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0-alpha05'

    api "androidx.appcompat:appcompat:${rootProject.ext.dependencies.androidXVersion}"
    api 'com.google.android.material:material:1.2.0'

    testImplementation 'junit:junit:4.12'
    implementation 'com.yanzhenjie:recyclerview-swipe:1.1.4'
    //基础库
//    api 'com.github.Sum-sdl:RvAdapter:3.0.1
//    api 'com.github.bumptech.glide:glide:4.9.0'
    api 'com.blankj:utilcode:1.28.0'

    //RecyclerView 流式布局
    api 'com.google.android:flexbox:2.0.1'

    implementation project(':library-base')
    implementation project(':library-ui')
    implementation project(':library-network')
    implementation project(':library-cache')

    //美团日志框架
    implementation 'com.dianping.android.sdk:logan:1.2.1'
    implementation 'com.tencent.mars:mars-xlog:1.0.7'


    //网络请求数据拦截
    debugImplementation 'com.readystatesoftware.chuck:library:1.1.0'
    releaseImplementation 'com.readystatesoftware.chuck:library-no-op:1.1.0'

    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //协程
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.27.0-eap13'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:0.27.0-eap13'

    //刷新控件
//    api 'com.scwang.smartrefresh:SmartRefreshLayout:1.1.0-alpha-14'
//    api 'com.scwang.smartrefresh:SmartRefreshHeader:1.1.0-alpha-14'

    implementation 'com.github.orangegangsters:swipy:1.2.3@aar'
    //    implementation "io.reactivex.rxjava2:rxjava:2.1.7"
    // butterknife
    //    annotationProcessor 'com.jakewharton:butterknife:8.8.1'
    //    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    //    implementation 'com.blankj:utilcode:1.13.11'
    //最新框架lifecycle扩展
    //    implementation "android.arch.lifecycle:extensions:1.1.1"
    //androidx 统一框架开头
    //    implementation "androidx.lifecycle:lifecycle-extensions:2.0.0-beta01"
    //多数据源分页库
    //    implementation "android.arch.paging:runtime:1.0.1"
    //导航栏组件
    //    implementation "android.arch.navigation:navigation-fragment-ktx:1.0.0-alpha02"
    //    implementation "android.arch.navigation:navigation-ui-ktx:1.0.0-alpha02"
    //databinding构建加载
    //    annotationProcessor "com.android.databinding:compiler:3.1.3"
    implementation 'cn.dreamtobe.kpswitch:library:1.6.1'
    implementation 'q.rorbin:badgeview:1.1.3'
    implementation 'org.xutils:xutils:3.5.0'
    // walle  Android Signature V2 Scheme签名下的新一代渠道包打包神器
    implementation 'com.meituan.android.walle:library:1.1.6'
    implementation 'com.github.lzyzsd:jsbridge:1.0.4'

    //ui卡顿检测
    implementation 'com.github.markzhai:blockcanary-android:1.5.0'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.1'

    implementation 'me.jessyan:autosize:1.1.2'
    if (file("${rootProject.rootDir}/core/aa.aar").exists()) {
        implementation files("${rootProject.rootDir}/core/aa.aar")
    } else {
        //远程依赖
    }

//    路由
//    implementation 'com.github.Sum-sdl:router-api:1.0.1'
//    annotationProcessor 'com.github.Sum-sdl:router-complier:1.0.1'

//    implementation "com.google.protobuf:protobuf-java:3.11.0"
//    implementation "com.google.protobuf:protobuf-java:3.1.0"


    // You need to depend on the lite runtime library, not protobuf-java 固定不变
    implementation 'com.google.protobuf:protobuf-lite:3.0.0'

}

//配置protobuf插件信息
protobuf {
    protoc {
        // You still need protoc like in the non-Android case
        //编译proto文件采用的版本,可以升级
        artifact = 'com.google.protobuf:protoc:3.8.0'
    }
    plugins {
        javalite {
            //固定不变
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.plugins {
                javalite { }
            }
        }
    }
}



repositories {
    mavenCentral()
}

//project.android.buildTypes.each {
//    addFlutterJarImplementationDependency(project, releaseFlutterJar)
//}
//project.android.buildTypes.whenObjectAdded {
//    addFlutterJarImplementationDependency(project, releaseFlutterJar)
//}
//
//private static void addFlutterJarImplementationDependency(Project project, releaseFlutterJar) {
//    project.dependencies {
//        String configuration
//        if (project.getConfigurations().findByName("implementation")) {
//            configuration = "implementation"
//        } else {
//            configuration = "compile"
//        }
//        add(configuration, project.files {
//            releaseFlutterJar
//        })
//    }
//}

