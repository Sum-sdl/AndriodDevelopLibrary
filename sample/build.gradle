apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    signingConfigs {
        config {
            keyAlias 'sum'
            keyPassword '123456'
            storeFile file('../sample/debug_keystore.jks')
            storePassword '123456'
        }
    }

    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {

        applicationId rootProject.ext.app.applicationId
        minSdkVersion rootProject.ext.app.minSdkVersion
        targetSdkVersion rootProject.ext.app.targetSdkVersion
        versionCode rootProject.ext.app.versionCode
        versionName rootProject.ext.app.versionName

        multiDexEnabled true
        //默认渠道 LEAN_CLOUD_CHANNEL:manifest 中的key
        manifestPlaceholders = [LEAN_CLOUD_CHANNEL: "huawei"]
        //添加自定义BuildConfig属性,可用来避免手动配置代码（如不同的环境域名）
        buildConfigField("boolean", "LOG_SHOW", "true")
        buildConfigField("String", "API_HOST", "\"https\"")
        // 用于动态添加新的资源文件里面值
        resValue("string", "app_add_res", "AAA")

        /*ndk {
            //选择要添加的对应cpu类型的.so库。
            abiFilters 'armeabi', 'armeabi-v7a', 'x86'
            // 还可以添加 'armeabi-v8a', 'x86_64', 'mips', 'mips64'
        }*/

        signingConfig signingConfigs.config
    }
    buildTypes {
        debug {
            minifyEnabled false//混淆
            debuggable true//调试
            buildConfigField("String", "API_HOST", "\"https+++重写构建值\"")
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    /* //渠道名称
    productFlavors {
        _360 {}
        baidu {}
        anzhi {}
        wandoujia {}
        yingyongbao {}
        huawei {}
        xiaomi {}
    }
    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [LEAN_CLOUD_CHANNEL: name]
    }*/
    //jni 调用位置
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    /* //修改生成的apk名字
      android.applicationVariants.all { variant ->
        variant.outputs.all {
//            outputFileName = "${variant.name}-${variant.versionName}.apk"
            outputFileName = "com.rent.azn_v${variant.versionName}_${variant.buildType.name}.apk"
        }
    }*/
}

//强制相同的库使用统一的版本
configurations.all {
    resolutionStrategy {
//        force "com.android.support:appcompat-v7:27.1.1"
    }
}

dependencies {
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
//    implementation 'com.android.support:support-v4:28.0.0-alpha3'
    testImplementation 'junit:junit:4.12'
    implementation 'com.yanzhenjie:recyclerview-swipe:1.1.4'
    implementation project(':library')
//    implementation "io.reactivex.rxjava2:rxjava:2.1.7"
    // butterknife
//    compile 'com.jakewharton:butterknife:8.8.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    //最新框架
//    implementation "android.arch.lifecycle:extensions:1.1.1"
    //androidx 统一框架开头
//    implementation "androidx.lifecycle:lifecycle-extensions:2.0.0-beta01"
}

repositories {
    mavenCentral()
}
