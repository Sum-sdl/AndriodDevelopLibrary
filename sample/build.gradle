apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    signingConfigs {
        config {
            keyAlias 'sum'
            keyPassword '123456'
            storeFile file('../sample/debug_keystore.jks')
            storePassword '123456'
        }
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {

        applicationId rootProject.ext.app.applicationId
        minSdkVersion rootProject.ext.app.minSdkVersion
        targetSdkVersion rootProject.ext.app.targetSdkVersion
        versionCode rootProject.ext.app.versionCode
        versionName rootProject.ext.app.versionName

        multiDexEnabled true
        //默认渠道 LEAN_CLOUD_CHANNEL:manifest 中的key
        manifestPlaceholders = [LEAN_CLOUD_CHANNEL: "huawei"]
        //添加自定义BuildConfig属性,可用来避免手动配置代码（如不同的环境域名）
        buildConfigField("boolean", "LOG_SHOW", "true")
        buildConfigField("String", "API_HOST", "\"https\"")
        // 用于动态添加新的资源文件里面值
        resValue("string", "app_add_res", "AAA")

        /*ndk {
            //选择要添加的对应cpu类型的.so库。
            abiFilters 'armeabi', 'armeabi-v7a', 'x86'
            // 还可以添加 'armeabi-v8a', 'x86_64', 'mips', 'mips64'
        }*/

        signingConfig signingConfigs.config
    }
    buildTypes {
        debug {
            minifyEnabled false//混淆
            debuggable true//调试
            buildConfigField("String", "API_HOST", "\"https+++重写构建值\"")
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    /* //渠道名称
    productFlavors {
        _360 {}
        baidu {}
        anzhi {}
        wandoujia {}
        yingyongbao {}
        huawei {}
        xiaomi {}
    }
    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [LEAN_CLOUD_CHANNEL: name]
    }*/
    //jni 调用位置
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    /* //修改生成的apk名字
    applicationVariants.all {
        variant ->
            variant.outputs.each {
                output ->
                    def oldFile = output.outputFile
                    if (variant.buildType.name.equals('release')) {
                        def releaseApkName = 'com.sum-v' + defaultConfig.versionName + '-' + variant.productFlavors[0].name + '-rel.apk'
                        output.outputFile = new File(oldFile.parent, releaseApkName)
                    }
                    if (variant.buildType.name.equals('debug')) {
                        def newName = 'com.-v' + defaultConfig.versionName + '-' + variant.productFlavors[0].name + '-debug.apk'
                        output.outputFile = new File(oldFile.parent, newName)
                    }

                    if (output.zipAlign != null) {
                        output.zipAlign.doLast {
                            output.zipAlign.inputFile.delete()
                        }
                    }
            }
    }*/
}

dependencies {
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile project(':library')
    // butterknife
//    compile 'com.jakewharton:butterknife:8.8.1'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}

repositories {
    mavenCentral()
}
